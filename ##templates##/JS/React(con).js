/*
React (https://unpkg.com/react@18/umd/react.development.js)
React DOM (https://unpkg.com/react-dom@18/umd/react-dom.development.js)
Babel (https://unpkg.com/babel-standalone@6/babel.min.js)

npm commands
	npm init 															создать package.json
	npm i (npm install)										установить зависимости
	npm i hello-world-npm@1.1.1						с выбором версии 
	npm i hello-world-npm@1.1.1 -Е				с точным выбором версии (без ^) 
	npm i hello-world-npm -D (--save-dev)	с установить в devDependencies 
	-g (лучше через npx)									Установить глобально
	npm un ... (uninstall)								Удалить

1 .Install NODE
2. Install CRA (Create React APP)
	(npx create-react-app my-app)
3. Запустить CRA.
	npm run start (build)
4. Создать, если надо package.json
	npm init
5. Установить зависимости (node modules)
	npm i (npm install)
6. Устанавливать библиотеки:
	Например: npm i hello-world-npm
	Или вручную добавить в package.json и npm i
	С выбором версии npm i hello-world-npm@1.1.1
	С точным выбором версии (без ^) npm i hello-world-npm@1.1.1 -Е
	С установить в devDependencies npm i hello-world-npm -D (или: --save-dev)
	Установить глобально: -g (лучше через npx)
 Удалить: npm un ... (uninstall)



Внутри jsx можно использ. только map или reduce (filter только с последующей конвертацией в react)
	т.к. они возвращают результат. За пределами jsx можно испозьз. что угодно.

Вместо class используется className
Подключение стилей: import './style.css';

Если внутри jsx использ Map() то елементам массива нужен уникальный ключ key={}
В случае, если исходный массив точно не будет меняться - то можно использ второй аргумент ф-ции Map - index: Map((user, index)=>...)
В случае если ключи в массиве уникальны - можно использ их
В остальных случаях лучше генерировать ключи самостоятельно на основе данных

?  =================//
Для bable нужно указать type="text/babel" в подключаемом скрипте с компонентом

Импорты из внешних пакетов следует размещать в начале файла, а затем свои импорты.

Для рендеринга React-элемента, сперва передайте DOM-элемент в ReactDOM.createRoot(),
	далее передайте React-элемент в root.render():

	const root = ReactDOM.createRoot(
		document.getElementById('root')
	);
	const element = <h1>Hello, world</h1>;
	root.render(element);
	
? Events =================//

onSubmit				отправка формы
onClick					обработчик кликов
onChange				обработчик инпутов
onMouseEnter		мышь наведена
onMouseLeave		мышь ушла
onMouseDown			мышь нажата
onMouseUp				мышь отжата

? props =================//

? Хуки =================//
	
Хуки — это функции, с помощью которых вы можете «подцепиться» к состоянию и методам жизненного цикла React из функциональных компонентов.
Хуки не работают внутри классов — они дают вам возможность использовать React без классов.
Хуки — это функции JavaScript, которые налагают два дополнительных правила:
	1. Хуки следует вызывать только на верхнем уровне.
		Не вызывайте хуки внутри циклов, условий или вложенных функций.
	2. Хуки следует вызывать только из функциональных компонентов React.
		Не вызывайте хуки из обычных JavaScript-функций.
		Есть только одно исключение, откуда можно вызывать хуки — это ваши пользовательские хуки.











*/

/*
!===================================================

REACT 10
const USERS = [
	{ name: 'Alex', age: 18, id: 562 },
	{ name: 'John', age: 58, id: 552 },
	{ name: 'Bob', age: 15, id: 592 },
	{ name: 'Bob', age: 11, id: 762 },
]
1. Для массива вывести имена пользователей в документ
	Создать уникальные ключи:
	через имена
	через Map(), используя index
	Написать функцию, генерирующую уникальные ключи (Alex_18_562)

	
2. Создать кнопку и инпут через компоненты
	Повесить обработчики событий
	Вывести в консоль события event & value
	Завернуть все в форму и навесить на нее сабмит

!  =================//

3. Вывести на экран текст с переменными (09-10st)
			(I don't have any animals!!!
			My Wolf is 89 year old)`
	Менять текст с помощью свойства hasPet(true/false)

4. Создать кнопку, генерирующую число и вывести на экран (11st)
	Добавить возможность менять границы чисел через maxNum="300"

5. Создать 4 кнопки, увеличивающие счетчик (12st)
	Переделать кнопки с помощью map (13st)

6. Создать массив с помощью https://mockaroo.com/  (14st)
	Сгенерировать карточки пользователей ()  (id firstТame, lastТame, email, img )
		Создать компонент Persons, который пройдет методом map и вернет массив карточек,
		в котором будет компонент Person. Person будет наполнять карточки данными

! =================//

Вывод ассоциативного массива.
Создайте компонент Nav, в него передайте props.nav 
	куда добавьте ассоциативный массив в формате пункт меню - ссылка. 
	Все ссылки поставить как якоря (#). Данные в Nav должны передаваться из файла index.js. 
	Вывести указанный массив на страницу.
		let nav = {
			'main': '/index',
			'about': '/about',
			'price': '/price'
		}








*/
